## 1. Основные метрики изначального кода:

	1) CPU загружен на 15% с периодическими всплесками до 30% в момент запуска JVisualVM;
	
	2) Среднее время обработки одного запроса в момент запуска 90 мс с последующим повышением 1-2 мс в секунду. Включение сэмплера повышает среднее время обработки до 900 мс; включение профайлера повысило время до 280 мс.

	3) Утечка памяти проявляется в увеличении использованного объема heap'a от 10 до 100 Мб раз в 30 секунд. Дальше происходит сборка мусора.



## 2. Внесенные в код изменения:


	1) Уберем повторную загрузку драйверов из getUserDAO() и getAccountDAO() и уберем инициализацию лишних объектов в классе H2DAOFactory.
	Это не привело к заметному увеличению производительности

	2) В методе getAccountByUser() класса AccountDAOImpl был убран повторный запрос к базе данных: после первого запроса acc в return'e был еще один. Это привело к снижению времени: оно упало до 60 мс с последующей стабилизацией на уровне 90 мс.

	3) Из класса UserDAO удален лист fetched, так как он нигде не используется, и код просто набивает в него всех пользователей.

	4) В классах User и UserTransaction функции, генерирующие hash-code напоминают те, что прописаны в классах самой Java. Но вот в классе Account генератор hash-code выдает всегда единицу. Это приводит к коллизиям, которые машина вынуждена разрешать. Перепишем ее 


## 3. Основные метрики исправленного кода:

	1) CPU загружен на 8,9% с периодическими всплесками до 30% в момент запуска JVisualVM;
	
	2) Среднее время обработки одного запроса составило 47 мс.

	3) Heap растет до 200Мб и стабилизируется. Used heap колеблется у отметки 60 Мб со всплесками до 100 Мб.


## 4. Выбор GC.

	1) Serial GC:
		- CPU загружен на 8,9%;
		- used heap около 70 Мб;
		- среднее время выполнения сценария 47 мс.

	2) Parallel GC:
		- CPU загружен на 9,1%;
		- used heap около 90 Мб;
		- среднее время выполнения сценария 46 мс.
		
	3) CMS GC:
		- CPU загружен на 9,4%;
		- used heap около 70 Мб;
		- среднее время выполнения сценария 49 мс.

	4) G1 GC:
		- CPU загружен на 9,8%;
		- used heap около 100 Мб;
		- среднее время выполнения сценария 47 мс.					


	Самым быстрым оказался Parallel GC, но самым "прожорливым" - G1 GC.

